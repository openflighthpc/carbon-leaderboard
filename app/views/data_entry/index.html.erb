<h1 class="text-center mb-5">Enter your server data</h1>
<p class="text-center">Is your server connected to the internet?</p>
<div class="btn-group radio-buttons flex-space-between" role="group" aria-label="internet-toggle">
  <input type="radio"
         class="btn-check"
         name="btnradio"
         id="radio-yes"
         autocomplete="off"
         <%= 'checked' unless params[:offline_instructions] %>
  >
  <label class="btn btn-outline-primary" for="radio-yes">Yes</label>
  <input type="radio"
         class="btn-check"
         name="btnradio" id="radio-no"
         autocomplete="off"
         <%= 'checked' if params[:offline_instructions] %>
  >
  <label class="btn btn-outline-primary" for="radio-no">No</label>
</div>

<%= render 'step_card', locals: {
  title: 'Make an account (optional)',
  show_card: { online: true, offline: true },
} do %>
  <% content_for :buttons, :flush => true do %>
    <%= link_to "Sign up", new_registration_path(:user) %>
  <% end %>
  <p>
    Make an account to claim your servers on the leaderboard and get
    access to tools for tracking your server emission stats more easily.
  </p>
<% end %>
<%= render 'step_card', locals: {
  title: 'Run the Carbon Client on your server',
  hide_actions: true,
  show_card: { online: true, offline: false },
} do %>
  <% content_for :buttons, :flush => true do %>
    <div></div>
  <% end %>
  <p>
    To collect data on your server specifications and enter onto the leaderboard,
    run the following command on your server:
  </p>
  <p class="code-wrapper">
    <code class="code-block">
      curl -s -L https://github.com/openflighthpc/carbon-leaderboard/raw/main/carbon-client/carbon | COMMAND='send'
      ACCEPT_DEFAULTS='true' /bin/bash
    </code>
  </p>
  <p>
    For more options, such as associating your servers with your user account,
    see the advanced usage information below.
  </p>
<% end %>

<%= render 'step_card', locals: {
  title: 'Download the Carbon Client',
  show_card: { online: false, offline: true },
} do %>
  <% content_for :buttons, :flush => true do %>
    <%= link_to "Download", action: :download_carbon %>
  <% end %>
  <p>
    The Carbon Client is a BASH script which collects the required data for
    adding entries to the Carbon Leaderboard.
  </p>
<% end %>
<%= render 'step_card', locals: {
  title: 'Run the Carbon Client on your server',
  hide_actions: true,
  show_card: { online: false, offline: true },
} do %>
  <% content_for :buttons, :flush => true do %>
    <div></div>
  <% end %>
  <p>
    To collect data on your server emissions and enter onto the leaderboard,
    save the Carbon Client on your server and run the following command:
  </p>
  <p class="text-center mb-4">
    <code class="code-block">bash carbon send</code>
  </p>
  <p>
    This will collect all the data you need to enter your server onto the leaderboard.
    However, you can find information below about more advanced options, such
    as associating your servers with your user account.
  </p>
<% end %>
<%= render 'step_card', locals: {
  title: 'Upload your data',
  show_card: { online: false, offline: true },
} do %>
  <% content_for :buttons, :flush => true do %>
    <%= form_with url: "/data-entry/upload", multipart: true, class: 'file-input' do |form| %>
      <%= file_field_tag :device, class: "form-control" %>
      <%= submit_tag "Upload", class: "btn btn-outline-primary ml-3" %>
    <% end %>
    <% if params[:upload_status] %>
      <span><%= params[:upload_status] %></span>
    <% end %>
  <% end %>
  <p>
    Find your payload file at <code>carbon-log/payload-${UUID}.json</code> and upload it below.
  </p>
<% end %>
<%= render 'step_card', locals: {
  title: 'See how your server does on the leaderboard!',
  show_card: { online: true, offline: true },
} do %>
  <% content_for :buttons, :flush => true do %>
    <%= link_to "View leaderboard", leaderboard_path %>
  <% end %>
<% end %>

<hr class="wide-card">

<div class="card wide-card advanced-card">
  <h3>Advanced usage options</h3>
  <%= render 'advanced_instruction', locals: {
    id: 'accountInstructions',
    title: 'Associating a device with your user account',
  } do %>
    <p>
      When collecting system information in the leaderboard it may be desired to
      optionally "claim" the device that is being sent. To do so, a user account
      will need to be created in the leaderboard and the <code>JWT_TOKEN</code>
      for the user will need to be set as the environment variable <code>AUTH_TOKEN</code>.
    </p>
  <% end %>
  <%= render 'advanced_instruction', locals: {
    id: 'locationInstructions',
    title: 'Specifying location',
  } do %>
    <p>
      If the connection to the Internet goes via a VPN or proxy then the location
      determined by the script may be incorrect. To override the automated location
      identified, ensure that the environment variable <code>LOCATION</code> is set
      to a valid ISO 3166-1 alpha-3 code.
    </p>
  <% end %>
  <%= render 'advanced_instruction', locals: {
    id: 'dependencies',
    title: 'View dependencies',
  } do %>
    <p><code>BASH  </code></p>
    <p><code>lshw  </code></p>
    <p><code>lsblk </code></p>
    <p><code>md5sum</code></p>
  <% end %>
  <%= render 'advanced_instruction', locals: {
    id: 'silenceInstructions',
    title: 'Silencing output',
  } do %>
    <p>
      By default the script will print a one-line debug of the system specs when
      <code>send</code> is run. This can be silenced by setting the environment
      variable <code>QUIET</code> to <code>true</code>.
    </p>
  <% end %>
  <%= render 'advanced_instruction', locals: {
    id: 'payload',
    title: 'Offline data collection (the payload file)',
  } do %>
    <p>
      The payload file (<code>carbon-log/payload-${UUID}.json</code>) is created
      by a device when it is unable to reach the leaderboard. This payload file can
      have 1 or more entries for the device.
    </p>
    <p>
      As the <code>send</code> command collects
      the load average over the last 15 minutes for "live" carbon data, this file can
      be used to build up many entries over time for a single device in order to get
      historical estimates of the actual impact of the device at whatever load it has
      been at.
    </p>
  <% end %>
  <%= render 'advanced_instruction', locals: {
    id: 'acceptDefaults',
    title: 'Accepting defaults',
  } do %>
    <p>
      By default the script will prompt confirmation of the various system specs with
      the user. To prevent this from happening in the future set the environment variable
      <code>ACCEPT_DEFAULTS</code> to <code>true</code>.
    </p>
    <p>
      Note: Overrides to system specs only happen on a per-run basis so would need to be
      overridden each time the command is run.
    </p>
  <% end %>
</div>

<script type="text/javascript" src="/assets/data_entry/index.js"></script>
