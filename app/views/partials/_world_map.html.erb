<% locations = locals[:data] %>
<% counts = locals[:counts] %>

<div id="map-wrapper" class="full-width"></div>

<script src="https://cdn.amcharts.com/lib/5/index.js"></script>
<script src="https://cdn.amcharts.com/lib/5/map.js"></script>
<script src="https://cdn.amcharts.com/lib/5/geodata/worldLow.js"></script>
<script>
  const root = am5.Root.new("map-wrapper");
  const chart = root.container.children.push(
    am5map.MapChart.new(root, {
      panX: "rotateX",
      projection: am5map.geoEqualEarth()
    })
  );
  const polygonSeries = chart.series.push(
    am5map.MapPolygonSeries.new(root, {
      geoJSON: am5geodata_worldLow,
      fill: am5.color(0x2794d8),
    })
  );
  const pointSeries = chart.series.push(
    am5map.MapPointSeries.new(root, {})
  );
  pointSeries.bullets.push(function (root, series, dataItem) {
    const container = am5.Container.new(root, {
      paddingTop: 5
    });
    const color = am5.color(0x404040);
    const radius = 20;
    const pole = container.children.push(am5.Line.new(root, {
      stroke: color,
      height: -radius,
      strokeWidth: 3,
      strokeGradient: am5.LinearGradient.new(root, {
        stops: [
          {opacity: 1},
          {opacity: 1},
          {opacity: 0}
        ]
      })
    }));
    const label = container.children.push(am5.Label.new(root, {
      centerX: am5.p50,
      centerY: am5.p50,
      dy: -radius * 2 + 1,
    }))
    label.set('html',
      `<span
         class="flag map fi fi-{tooltipData.flagCode} fis"
         title="{tooltipData.count} located in {tooltipData.country}"
         style="font-size: ${radius * 1.6}px; height: ${radius * 1.6}px;">
       </span>`);
    label.events.on("click", function(ev) { console.log(value) });
    label.setAll({
      oversizedBehavior: "truncate",
      maxWidth: 100
    });
    label.setup = function(target) {
      target.set("background", am5.Rectangle.new(root, {
        fill: am5.color(0x000000),
        fillOpacity: 0
      }));
    };
    return am5.Bullet.new(root, {
      sprite: container
    });
  });

  pointSeries.data.setAll([
    <% locations.each do |dev| %>
    {
      geometry: {
        type: "Point",
        coordinates: [<%= dev[:longitude] %>, <%= dev[:latitude] %>],
      },
      tooltipData: {
        count: <%= counts[dev[:three_digit_location]] %>,
        flagCode: '<%= dev[:two_digit_location].downcase %>',
        country: '<%= dev[:country_name] %>',
      },
    },
    <% end %>
  ]);
</script>
